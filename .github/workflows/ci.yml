name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  install:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: orm_test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    env:
      DATABASE_URL: "postgresql://user:password@localhost:5432/orm_test"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Save node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  test:
    needs: install
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: orm_test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    env:
      DATABASE_URL: "postgresql://user:password@localhost:5432/orm_test"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run tests
        run: node index.js

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub  
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push without Dockerfile
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: antonyanlinux/myapp:latest
          file: "-"
          build-args: |
            BASE_IMAGE=node:18
            CMD=["node", "index.js"]

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker image pull antonyanlinux/myapp:latest
            docker container stop my-container || true
            docker container rm my-container || true
            docker container run -d --name my-container -p 80:5000 antonyanlinux/myapp
